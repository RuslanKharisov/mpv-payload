'use client'

import React, { useCallback, useEffect, useState } from 'react'
// üëá –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –•–£–ö
import { useField } from '@payloadcms/ui'
import { DaDataInput } from './DaDataInput'
// import { findOrCreateAddressAction } from '../actions/findOrCreateAddressAction'

type Props = {
  addressRelationPath: string
  selectedAddressDataPath: string
}

const DaDataAddressField: React.FC<Props> = ({ addressRelationPath, selectedAddressDataPath }) => {
  // üëá –ò–°–ü–û–õ–¨–ó–£–ï–ú –•–£–ö useField.
  // –û–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–Ω–∏–º –ø–æ–ª–µ–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏ value, –∏ setValue.
  // –í –∫–∞—á–µ—Å—Ç–≤–µ generic <string> —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è (ID - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞).
  const { value: addressId, setValue } = useField<string>({ path: addressRelationPath })

  const { setValue: setSelectedAddress } = useField<object>({ path: selectedAddressDataPath })

  const [initialDisplayValue, setInitialDisplayValue] = useState('')
  const [isLoading, setIsLoading] = useState(true)

  // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
  useEffect(() => {
    if (addressId && typeof addressId === 'string' && !initialDisplayValue) {
      setIsLoading(true)
      const fetchAddress = async () => {
        try {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –µ–≥–æ ID.
          // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ Payload, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ payload.findByID –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ action.
          // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º fetch.
          const response = await fetch(`/api/addresses/${addressId}`)
          if (response.ok) {
            const data = await response.json()
            setInitialDisplayValue(data.fullAddress || '')
          }
        } catch (error) {
          console.error('Failed to fetch initial address', error)
        } finally {
          setIsLoading(false)
        }
      }
      fetchAddress()
    } else {
      setIsLoading(false)
    }
  }, [addressId, initialDisplayValue])

  const handleSelect = useCallback(
    (suggestion: any) => {
      if (setSelectedAddress) {
        // –ü—Ä–æ—Å—Ç–æ –∫–ª–∞–¥–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç suggestion –≤ –Ω–∞—à–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–ª–µ.
        // Payload –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ –∫–∞–∫ JSON.
        setSelectedAddress(suggestion)
      }
    },
    [setSelectedAddress],
  )

  if (isLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–∞...</div>
  }

  return (
    <DaDataInput
      onSelect={handleSelect}
      initialValue={initialDisplayValue}
      key={addressId || 'new'}
    />
  )
}

export default DaDataAddressField

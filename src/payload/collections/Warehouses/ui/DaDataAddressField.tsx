'use client'

import React, { useCallback, useEffect, useState } from 'react'
// üëá –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ü–†–ê–í–ò–õ–¨–ù–´–ô –•–£–ö
import { useField } from '@payloadcms/ui'
import { DaDataInput } from './DaDataInput'
import { findOrCreateAddressAction } from '../actions/findOrCreateAddressAction'

type Props = {
  path: string
  adressPath: string // e.g., 'address'
}

const DaDataAddressField: React.FC<Props> = ({ path, adressPath }) => {
  // üëá –ò–°–ü–û–õ–¨–ó–£–ï–ú –•–£–ö useField.
  // –û–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–Ω–∏–º –ø–æ–ª–µ–º –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏ value, –∏ setValue.
  // –í –∫–∞—á–µ—Å—Ç–≤–µ generic <string> —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è (ID - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞).
  const { value: addressId, setValue } = useField<string>({ path })

  const [initialDisplayValue, setInitialDisplayValue] = useState('')
  const [isLoading, setIsLoading] = useState(true)

  // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
  useEffect(() => {
    if (addressId && typeof addressId === 'string' && !initialDisplayValue) {
      setIsLoading(true)
      const fetchAddress = async () => {
        try {
          // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ –µ–≥–æ ID.
          // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤ Payload, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ payload.findByID –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ action.
          // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º fetch.
          const response = await fetch(`/api/addresses/${addressId}`)
          if (response.ok) {
            const data = await response.json()
            setInitialDisplayValue(data.fullAddress || '')
          }
        } catch (error) {
          console.error('Failed to fetch initial address', error)
        } finally {
          setIsLoading(false)
        }
      }
      fetchAddress()
    } else {
      setIsLoading(false)
    }
  }, [addressId, initialDisplayValue])

  const handleSelect = useCallback(
    async (suggestion: any) => {
      // setValue –º–æ–∂–µ—Ç –±—ã—Ç—å undefined, –µ—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
      if (!setValue) {
        console.error(`Field with path "${adressPath}" not found.`)
        return
      }

      try {
        // –í—ã–∑—ã–≤–∞–µ–º Server Action –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        const newAddressId = await findOrCreateAddressAction(suggestion)

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ 'address' —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ setValue –∏–∑ —Ö—É–∫–∞ useField
        setValue(newAddressId)
      } catch (error) {
        console.error('Error processing address selection:', error)
      }
    },
    [setValue, adressPath],
  )

  if (isLoading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–∞...</div>
  }

  return <DaDataInput onSelect={handleSelect} initialValue={initialDisplayValue} />
}

export default DaDataAddressField

'use client'

import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import * as z from 'zod'
import { Button } from '@/shared/ui/button'
import { Input } from '@/shared/ui/input'
import { Spinner } from '@/shared/ui/spinner'
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/shared/ui/form'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/ui/select'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/shared/ui/dialog'
import Image from 'next/image'
import { Separator } from '@/shared/ui/separator'
import { useState } from 'react'
import { ArrowRight, Minus } from 'lucide-react'
import { CartEntry } from '@/entities/cart'
import { Textarea } from '@/shared/ui/textarea'

// ======== ZOD-–°–•–ï–ú–ê ========
const SendPriceRequestSchema = z.object({
  unitTargetPriceAmount: z.string().min(1, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É'),
  unitTargetPriceCurrency: z.enum(['EUR', 'GBP', 'PLN', 'USD']),
  deliveryTime: z.enum([
    'ANY',
    'NEXT_DAY',
    'TWO_TREE_DAYS',
    'FOUR_SIX_DAYS',
    'TEN_PLUS_DAYS',
    'SEVEN_TEN_DAYS',
    'EMERGENCY',
  ]),
  referenceNumber: z.string().optional(),
  note: z.string().optional(),
  firstName: z.string().min(1, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'),
  lastName: z.string().min(1, '–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é'),
  phone: z.string().min(1, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
  email: z.string().email('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'),
  companyName: z.string().min(1, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏'),
})

type SendPriceRequestFormValues = z.infer<typeof SendPriceRequestSchema>

interface SendPriceRequestModalProps {
  tenantName: string
  items: CartEntry[]
  trigger?: React.ReactNode
}

export function SendPriceRequestModal({ tenantName, items, trigger }: SendPriceRequestModalProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)

  const form = useForm<SendPriceRequestFormValues>({
    resolver: zodResolver(SendPriceRequestSchema),
    defaultValues: {
      unitTargetPriceAmount: '',
      unitTargetPriceCurrency: 'EUR',
      deliveryTime: 'EMERGENCY',
      referenceNumber: '',
      note: '',
      firstName: '',
      lastName: '',
      phone: '+7',
      email: '',
      companyName: '',
    },
  })

  const onSubmit = async (data: SendPriceRequestFormValues) => {
    setIsSubmitting(true)
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É:', tenantName, {
      formData: data,
      items, // üëà –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —É —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    })

    // TODO: fetch/trpc

    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:
    setTimeout(() => {
      setIsSubmitting(false)
      setIsOpen(false)
      form.reset() // –æ—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    }, 1500)
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button className="w-full">
            –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        )}
      </DialogTrigger>

      <DialogContent className="max-h-[90vh] max-w-2xl overflow-y-auto rounded-large p-0 shadow-small">
        <DialogHeader className="p-6 border-b border-border">
          <DialogTitle className="text-large font-semibold text-primary-default">
            –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö
          </DialogTitle>
          <DialogDescription className="sr-only">
            –ü–æ—Å—Ç–∞–≤—â–∏–∫: <span className="font-bold">{tenantName}</span>
          </DialogDescription>
        </DialogHeader>

        {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
        <div className="px-6 py-4">
          {items.map(({ item, quantity }) => (
            <div key={item.id} className="flex justify-between text-sm mb-2">
              <span>
                {item.sku} ({item.manufacturer})
              </span>
              <span>
                {quantity} √ó {item.currencyCode} {item.price?.toFixed(2)}
              </span>
            </div>
          ))}
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <Form {...form}>
          <form
            onSubmit={form.handleSubmit(onSubmit)}
            className="w-full flex flex-col gap-6 px-6 pb-8"
          >
            <Separator className="border-border" />

            {/* –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ */}
            <div className="font-semibold text-black">–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞</div>

            {/* –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="deliveryTime"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel htmlFor="deliveryTime" className="text-sm">
                      –°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏
                    </FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger id="deliveryTime">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="ANY">–õ—é–±–æ–π</SelectItem>
                        <SelectItem value="NEXT_DAY">–ù–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å</SelectItem>
                        <SelectItem value="TWO_TREE_DAYS">2-3 –¥–Ω—è</SelectItem>
                        <SelectItem value="FOUR_SIX_DAYS">4-6 –¥–Ω–µ–π</SelectItem>
                        <SelectItem value="TEN_PLUS_DAYS">10+ –¥–Ω–µ–π</SelectItem>
                        <SelectItem value="SEVEN_TEN_DAYS">7-10 –¥–Ω–µ–π</SelectItem>
                        <SelectItem value="EMERGENCY">–°—Ä–æ—á–Ω–æ</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="note"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm">–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</FormLabel>
                  <FormControl>
                    {/* <Input placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è" {...field} /> */}
                    <Textarea
                      placeholder="Tell us a little bit about yourself"
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <Separator className="border-border" />

            {/* –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
            <div className="font-semibold text-black">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="firstName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm">
                      –ò–º—è <span className="text-danger">*</span>
                    </FormLabel>
                    <FormControl>
                      <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="lastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm">
                      –§–∞–º–∏–ª–∏—è <span className="text-danger">*</span>
                    </FormLabel>
                    <FormControl>
                      <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm">
                      –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <span className="text-danger">*</span>
                    </FormLabel>
                    <FormControl>
                      <Input
                        type="tel"
                        autoComplete="mobile tel-country-code"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="text-sm">
                      Email <span className="text-danger">*</span>
                    </FormLabel>
                    <FormControl>
                      <Input
                        type="email"
                        autoComplete="email"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="companyName"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-sm">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ <span className="text-danger">*</span>
                  </FormLabel>
                  <FormControl>
                    <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <DialogFooter className="pt-4">
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting && <Spinner className="mr-2 h-4 w-4" />}
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}
